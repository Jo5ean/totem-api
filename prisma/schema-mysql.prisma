// üóÑÔ∏è PRISMA SCHEMA PARA MYSQL - UCASAL PRODUCCI√ìN
// Archivo: prisma/schema-mysql.prisma

generator client {
  provider = "prisma-client-js"
  output   = "./generated"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ========================================
// FACULTADES
// ========================================
model Facultad {
  id        Int      @id @default(autoincrement())
  nombre    String   @db.VarChar(255)
  codigo    String   @unique @db.VarChar(50)
  activo    Boolean  @default(true)
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  // Relaciones
  carreras      Carrera[]
  sectores      SectorFacultad[]
  syncLogs      SyncLog[]

  @@map("facultades")
}

// ========================================
// CARRERAS
// ========================================
model Carrera {
  id         Int      @id @default(autoincrement())
  nombre     String   @db.VarChar(255)
  codigo     String   @db.VarChar(50)
  facultadId Int
  activo     Boolean  @default(true)
  createdAt  DateTime @default(now()) @map("createdAt")
  updatedAt  DateTime @updatedAt @map("updatedAt")

  // Relaciones
  facultad      Facultad       @relation(fields: [facultadId], references: [id], onDelete: Cascade)
  examenes      Examen[]
  carrerasTotem CarreraTotem[]

  @@index([facultadId], map: "idx_facultad")
  @@index([codigo], map: "idx_codigo")
  @@map("carreras")
}

// ========================================
// AULAS
// ========================================
model Aula {
  id         Int       @id @default(autoincrement())
  nombre     String    @db.VarChar(255)
  capacidad  Int       @default(50)
  tipoAula   TipoAula  @default(regular) @map("tipoAula")
  ubicacion  String?   @db.VarChar(255)
  activo     Boolean   @default(true)
  createdAt  DateTime  @default(now()) @map("createdAt")
  updatedAt  DateTime  @updatedAt @map("updatedAt")

  // Relaciones
  examenes Examen[]

  @@index([nombre], map: "idx_nombre")
  @@index([capacidad], map: "idx_capacidad")
  @@map("aulas")
}

// ========================================
// EX√ÅMENES
// ========================================
model Examen {
  id                Int               @id @default(autoincrement())
  carreraId         Int
  aulaId            Int?
  nombreMateria     String            @db.VarChar(255)
  fecha             DateTime          @db.Date
  hora              DateTime?         @db.Time
  tipoExamen        String?           @db.VarChar(100)
  modalidadExamen   ModalidadExamen   @default(presencial) @map("modalidadExamen")
  monitoreo         String?           @db.Text
  materialPermitido String?           @db.Text
  observaciones     String?           @db.Text
  activo            Boolean           @default(true)
  asignacionAuto    Boolean           @default(true) @map("asignacionAuto")
  createdAt         DateTime          @default(now()) @map("createdAt")
  updatedAt         DateTime          @updatedAt @map("updatedAt")

  // Relaciones
  carrera       Carrera         @relation(fields: [carreraId], references: [id], onDelete: Cascade)
  aula          Aula?           @relation(fields: [aulaId], references: [id], onDelete: SetNull)
  inscripciones Inscripcion[]
  examenTotem   ExamenTotem?

  @@index([fecha], map: "idx_fecha")
  @@index([carreraId], map: "idx_carrera")
  @@index([aulaId], map: "idx_aula")
  @@index([activo], map: "idx_activo")
  @@map("examenes")
}

// ========================================
// MAPEO SECTORES ‚Üí FACULTADES
// ========================================
model SectorFacultad {
  id         Int      @id @default(autoincrement())
  sector     String   @db.VarChar(255)
  facultadId Int
  activo     Boolean  @default(true)
  createdAt  DateTime @default(now()) @map("createdAt")
  updatedAt  DateTime @updatedAt @map("updatedAt")

  // Relaciones
  facultad Facultad @relation(fields: [facultadId], references: [id], onDelete: Cascade)

  @@unique([sector], map: "unique_sector")
  @@index([sector], map: "idx_sector")
  @@map("sector_facultad")
}

// ========================================
// MAPEO CARRERAS TOTEM ‚Üí CARRERAS
// ========================================
model CarreraTotem {
  id           Int      @id @default(autoincrement())
  codigoTotem  String   @unique @db.VarChar(50)
  nombreTotem  String?  @db.VarChar(255)
  carreraId    Int?
  esMapeada    Boolean  @default(false) @map("esMapeada")
  activo       Boolean  @default(true)
  createdAt    DateTime @default(now()) @map("createdAt")
  updatedAt    DateTime @updatedAt @map("updatedAt")

  // Relaciones
  carrera Carrera? @relation(fields: [carreraId], references: [id], onDelete: SetNull)

  @@index([codigoTotem], map: "idx_codigo_totem")
  @@index([esMapeada], map: "idx_mapeada")
  @@map("carrera_totem")
}

// ========================================
// DATOS ORIGINALES TOTEM
// ========================================
model ExamenTotem {
  id             Int      @id @default(autoincrement())
  examenId       Int      @unique
  sectorTotem    String?  @db.VarChar(255)
  carreraTotem   String?  @db.VarChar(255)
  materiaTotem   String?  @db.VarChar(255)
  areaTemaTotem  String?  @db.VarChar(255)
  modoTotem      String?  @db.VarChar(255)
  urlTotem       String?  @db.Text
  catedraTotem   String?  @db.VarChar(255)
  docenteTotem   String?  @db.VarChar(255)
  monitoreoTotem String?  @db.Text
  controlTotem   String?  @db.VarChar(255)
  dataOriginal   Json?
  createdAt      DateTime @default(now()) @map("createdAt")
  updatedAt      DateTime @updatedAt @map("updatedAt")

  // Relaciones
  examen Examen @relation(fields: [examenId], references: [id], onDelete: Cascade)

  @@index([examenId], map: "idx_examen")
  @@index([sectorTotem], map: "idx_sector_totem")
  @@index([carreraTotem], map: "idx_carrera_totem")
  @@map("examen_totem")
}

// ========================================
// INSCRIPCIONES DE ESTUDIANTES
// ========================================
model Inscripcion {
  id             Int      @id @default(autoincrement())
  examenId       Int
  dni            String   @db.VarChar(20)
  nombreCompleto String?  @db.VarChar(255)
  email          String?  @db.VarChar(255)
  sede           String?  @db.VarChar(100)
  activo         Boolean  @default(true)
  createdAt      DateTime @default(now()) @map("createdAt")
  updatedAt      DateTime @updatedAt @map("updatedAt")

  // Relaciones
  examen Examen @relation(fields: [examenId], references: [id], onDelete: Cascade)

  @@unique([examenId, dni], map: "unique_inscripcion")
  @@index([examenId], map: "idx_examen")
  @@index([dni], map: "idx_dni")
  @@index([sede], map: "idx_sede")
  @@map("inscripciones")
}

// ========================================
// DATOS BRUTOS TOTEM (SHEET.BEST)
// ========================================
model TotemData {
  id        Int      @id @default(autoincrement())
  sheetName String   @db.VarChar(255)
  data      Json
  processed Boolean  @default(false)
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  @@index([processed], map: "idx_processed")
  @@index([sheetName], map: "idx_sheet_name")
  @@map("totem_data")
}

// ========================================
// LOGS DE SINCRONIZACI√ìN
// ========================================
model SyncLog {
  id                      Int          @id @default(autoincrement())
  tipo                    TipoSync
  estado                  EstadoSync
  mensaje                 String?      @db.Text
  datosAdicionales        Json?
  facultadId              Int?
  registrosProcesados     Int          @default(0)
  registrosCreados        Int          @default(0)
  registrosActualizados   Int          @default(0)
  duracion                Int?         // en millisegundos
  createdAt               DateTime     @default(now()) @map("createdAt")

  // Relaciones
  facultad Facultad? @relation(fields: [facultadId], references: [id], onDelete: SetNull)

  @@index([tipo], map: "idx_tipo")
  @@index([estado], map: "idx_estado")
  @@index([createdAt], map: "idx_fecha")
  @@map("sync_logs")
}

// ========================================
// CONFIGURACI√ìN VISUAL
// ========================================
model ConfiguracionVisual {
  id          Int                   @id @default(autoincrement())
  clave       String                @unique @db.VarChar(100)
  valor       String                @db.Text
  descripcion String?               @db.VarChar(255)
  tipo        TipoConfiguracion     @default(texto)
  activo      Boolean               @default(true)
  createdAt   DateTime              @default(now()) @map("createdAt")
  updatedAt   DateTime              @updatedAt @map("updatedAt")

  @@index([clave], map: "idx_clave")
  @@index([activo], map: "idx_activo")
  @@map("configuracion_visual")
}

// ========================================
// ENUMS
// ========================================
enum TipoAula {
  regular
  laboratorio
  auditorio
}

enum ModalidadExamen {
  presencial
  virtual
}

enum TipoSync {
  TOTEM
  INSCRIPCIONES
  MANUAL
}

enum EstadoSync {
  INICIADO
  COMPLETADO
  ERROR
}

enum TipoConfiguracion {
  texto
  numero
  booleano
  json
} 