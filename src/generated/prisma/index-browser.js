
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.9.0
 * Query Engine version: 81e4af48011447c3cc503a190e86995b66d2a28e
 */
Prisma.prismaVersion = {
  client: "6.9.0",
  engine: "81e4af48011447c3cc503a190e86995b66d2a28e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.FacultadScalarFieldEnum = {
  id: 'id',
  nombre: 'nombre',
  codigo: 'codigo',
  sector: 'sector',
  sheetId: 'sheetId',
  activa: 'activa',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CarreraScalarFieldEnum = {
  id: 'id',
  facultadId: 'facultadId',
  nombre: 'nombre',
  codigo: 'codigo',
  activa: 'activa',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ExamenScalarFieldEnum = {
  id: 'id',
  carreraId: 'carreraId',
  aulaId: 'aulaId',
  nombreMateria: 'nombreMateria',
  fecha: 'fecha',
  hora: 'hora',
  tipoExamen: 'tipoExamen',
  monitoreo: 'monitoreo',
  materialPermitido: 'materialPermitido',
  observaciones: 'observaciones',
  activo: 'activo',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  asignacionAuto: 'asignacionAuto',
  criterioAsignacion: 'criterioAsignacion',
  modalidadExamen: 'modalidadExamen',
  requierePc: 'requierePc',
  cantidadInscriptos: 'cantidadInscriptos',
  fechaUltConsulta: 'fechaUltConsulta'
};

exports.Prisma.SyncLogScalarFieldEnum = {
  id: 'id',
  facultadId: 'facultadId',
  tipoOperacion: 'tipoOperacion',
  resultado: 'resultado',
  mensaje: 'mensaje',
  registrosProcesados: 'registrosProcesados',
  createdAt: 'createdAt'
};

exports.Prisma.EstudianteScalarFieldEnum = {
  id: 'id',
  dni: 'dni',
  nombre: 'nombre',
  apellido: 'apellido',
  email: 'email',
  telefono: 'telefono',
  activo: 'activo',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AulaScalarFieldEnum = {
  id: 'id',
  nombre: 'nombre',
  capacidad: 'capacidad',
  ubicacion: 'ubicacion',
  disponible: 'disponible',
  alumnosAsignados: 'alumnosAsignados',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TotemDataScalarFieldEnum = {
  id: 'id',
  sheetName: 'sheetName',
  data: 'data',
  timestamp: 'timestamp',
  processed: 'processed'
};

exports.Prisma.ActaExamenScalarFieldEnum = {
  id: 'id',
  examenId: 'examenId',
  estudianteId: 'estudianteId',
  presente: 'presente',
  nota: 'nota',
  observaciones: 'observaciones',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SectorFacultadScalarFieldEnum = {
  id: 'id',
  sector: 'sector',
  facultadId: 'facultadId',
  activo: 'activo',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CarreraTotemScalarFieldEnum = {
  id: 'id',
  codigoTotem: 'codigoTotem',
  carreraId: 'carreraId',
  nombreTotem: 'nombreTotem',
  activo: 'activo',
  esMapeada: 'esMapeada',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ExamenTotemScalarFieldEnum = {
  id: 'id',
  examenId: 'examenId',
  sectorTotem: 'sectorTotem',
  carreraTotem: 'carreraTotem',
  materiaTotem: 'materiaTotem',
  areaTemaTotem: 'areaTemaTotem',
  modoTotem: 'modoTotem',
  urlTotem: 'urlTotem',
  catedraTotem: 'catedraTotem',
  docenteTotem: 'docenteTotem',
  monitoreoTotem: 'monitoreoTotem',
  controlTotem: 'controlTotem',
  dataOriginal: 'dataOriginal',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AulaConfiguracionScalarFieldEnum = {
  id: 'id',
  nombre: 'nombre',
  tipo: 'tipo',
  capacidadMaxima: 'capacidadMaxima',
  recursoEspecial: 'recursoEspecial',
  cantidadRecurso: 'cantidadRecurso',
  esParaInformatica: 'esParaInformatica',
  prioridadAsignacion: 'prioridadAsignacion',
  disponible: 'disponible',
  observaciones: 'observaciones',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ConfiguracionVisualScalarFieldEnum = {
  id: 'id',
  backgroundImage: 'backgroundImage',
  titulo: 'titulo',
  subtitulo: 'subtitulo',
  colorPrimario: 'colorPrimario',
  colorSecundario: 'colorSecundario',
  activa: 'activa',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.FacultadOrderByRelevanceFieldEnum = {
  nombre: 'nombre',
  codigo: 'codigo',
  sheetId: 'sheetId'
};

exports.Prisma.CarreraOrderByRelevanceFieldEnum = {
  nombre: 'nombre',
  codigo: 'codigo'
};

exports.Prisma.ExamenOrderByRelevanceFieldEnum = {
  nombreMateria: 'nombreMateria',
  tipoExamen: 'tipoExamen',
  monitoreo: 'monitoreo',
  materialPermitido: 'materialPermitido',
  observaciones: 'observaciones',
  criterioAsignacion: 'criterioAsignacion',
  modalidadExamen: 'modalidadExamen'
};

exports.Prisma.SyncLogOrderByRelevanceFieldEnum = {
  tipoOperacion: 'tipoOperacion',
  resultado: 'resultado',
  mensaje: 'mensaje'
};

exports.Prisma.EstudianteOrderByRelevanceFieldEnum = {
  dni: 'dni',
  nombre: 'nombre',
  apellido: 'apellido',
  email: 'email',
  telefono: 'telefono'
};

exports.Prisma.AulaOrderByRelevanceFieldEnum = {
  nombre: 'nombre',
  ubicacion: 'ubicacion'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.TotemDataOrderByRelevanceFieldEnum = {
  sheetName: 'sheetName'
};

exports.Prisma.ActaExamenOrderByRelevanceFieldEnum = {
  observaciones: 'observaciones'
};

exports.Prisma.SectorFacultadOrderByRelevanceFieldEnum = {
  sector: 'sector'
};

exports.Prisma.CarreraTotemOrderByRelevanceFieldEnum = {
  codigoTotem: 'codigoTotem',
  nombreTotem: 'nombreTotem'
};

exports.Prisma.ExamenTotemOrderByRelevanceFieldEnum = {
  sectorTotem: 'sectorTotem',
  carreraTotem: 'carreraTotem',
  materiaTotem: 'materiaTotem',
  areaTemaTotem: 'areaTemaTotem',
  modoTotem: 'modoTotem',
  urlTotem: 'urlTotem',
  catedraTotem: 'catedraTotem',
  docenteTotem: 'docenteTotem',
  monitoreoTotem: 'monitoreoTotem',
  controlTotem: 'controlTotem'
};

exports.Prisma.AulaConfiguracionOrderByRelevanceFieldEnum = {
  nombre: 'nombre',
  tipo: 'tipo',
  recursoEspecial: 'recursoEspecial',
  observaciones: 'observaciones'
};

exports.Prisma.ConfiguracionVisualOrderByRelevanceFieldEnum = {
  backgroundImage: 'backgroundImage',
  titulo: 'titulo',
  subtitulo: 'subtitulo',
  colorPrimario: 'colorPrimario',
  colorSecundario: 'colorSecundario'
};


exports.Prisma.ModelName = {
  Facultad: 'Facultad',
  Carrera: 'Carrera',
  Examen: 'Examen',
  SyncLog: 'SyncLog',
  Estudiante: 'Estudiante',
  Aula: 'Aula',
  TotemData: 'TotemData',
  ActaExamen: 'ActaExamen',
  SectorFacultad: 'SectorFacultad',
  CarreraTotem: 'CarreraTotem',
  ExamenTotem: 'ExamenTotem',
  AulaConfiguracion: 'AulaConfiguracion',
  ConfiguracionVisual: 'ConfiguracionVisual'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
