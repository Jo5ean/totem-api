import prisma from '../../../../lib/db.js';
import { withCors } from '../../../../lib/cors.js';

async function handler(req, res) {
  if (req.method !== 'GET') {
    return res.status(405).json({
      success: false,
      error: 'M√©todo no permitido. Usa GET.'
    });
  }

  try {
    console.log('üìÖ ANALIZANDO FECHAS DE EX√ÅMENES...');

    const hoy = new Date();
    const en30Dias = new Date(hoy.getTime() + 30 * 24 * 60 * 60 * 1000);

    // 1. Contar ex√°menes totales
    const totalExamenes = await prisma.examen.count();

    // 2. Contar ex√°menes en rango de backoffice (pr√≥ximos 30 d√≠as)
    const examenesProximos30Dias = await prisma.examen.count({
      where: {
        fecha: {
          gte: hoy,
          lte: en30Dias
        }
      }
    });

    // 3. Contar ex√°menes PASADOS
    const examenesPasados = await prisma.examen.count({
      where: {
        fecha: {
          lt: hoy
        }
      }
    });

    // 4. Contar ex√°menes MUY FUTUROS (m√°s de 30 d√≠as)
    const examenesMuyFuturos = await prisma.examen.count({
      where: {
        fecha: {
          gt: en30Dias
        }
      }
    });

    // 5. Obtener fechas l√≠mite
    const fechaMinima = await prisma.examen.findFirst({
      orderBy: { fecha: 'asc' },
      select: { fecha: true, nombreMateria: true }
    });

    const fechaMaxima = await prisma.examen.findFirst({
      orderBy: { fecha: 'desc' },
      select: { fecha: true, nombreMateria: true }
    });

    // 6. Contar ex√°menes sin aula en rango backoffice
    const examenesProximosSinAula = await prisma.examen.count({
      where: {
        aulaId: null,
        fecha: {
          gte: hoy,
          lte: en30Dias
        }
      }
    });

    const analisis = {
      totalExamenes,
      examenesProximos30Dias,
      examenesPasados,
      examenesMuyFuturos,
      examenesProximosSinAula,
      diferencia: totalExamenes - examenesProximos30Dias,
      fechaLimites: {
        minima: fechaMinima?.fecha,
        maxima: fechaMaxima?.fecha,
        ejemploMinimo: fechaMinima?.nombreMateria,
        ejemploMaximo: fechaMaxima?.nombreMateria
      },
      rangosAnalisis: {
        hoy: hoy.toISOString().split('T')[0],
        limite30Dias: en30Dias.toISOString().split('T')[0]
      }
    };

    console.log('üìä An√°lisis de fechas:', analisis);

    return res.status(200).json({
      success: true,
      message: 'An√°lisis de fechas completado',
      data: {
        resumen: `${totalExamenes} totales, ${examenesProximos30Dias} en pr√≥ximos 30 d√≠as (${totalExamenes - examenesProximos30Dias} fuera del rango)`,
        ...analisis,
        explicacion: {
          backoffice: `El backoffice muestra ${examenesProximos30Dias} ex√°menes (solo pr√≥ximos 30 d√≠as)`,
          excluidos: `${totalExamenes - examenesProximos30Dias} ex√°menes excluidos por fechas:`,
          desglose: [
            `${examenesPasados} ex√°menes pasados (antes de hoy)`,
            `${examenesMuyFuturos} ex√°menes muy futuros (m√°s de 30 d√≠as)`
          ],
          asignables: `${examenesProximosSinAula} ex√°menes pr√≥ximos sin aula asignada`
        }
      }
    });

  } catch (error) {
    console.error('‚ùå Error en an√°lisis de fechas:', error);
    
    return res.status(500).json({
      success: false,
      error: 'Error durante el an√°lisis',
      message: error.message
    });
  }
}

export default withCors(handler); 